# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import twopc_pb2 as twopc__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in twopc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class TwoPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/twopc.TwoPC/Initialize',
                request_serializer=twopc__pb2.InitializeRequest.SerializeToString,
                response_deserializer=twopc__pb2.Empty.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/twopc.TwoPC/Prepare',
                request_serializer=twopc__pb2.VoteRequest.SerializeToString,
                response_deserializer=twopc__pb2.VoteResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/twopc.TwoPC/Commit',
                request_serializer=twopc__pb2.CommitRequest.SerializeToString,
                response_deserializer=twopc__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.Abort = channel.unary_unary(
                '/twopc.TwoPC/Abort',
                request_serializer=twopc__pb2.AbortRequest.SerializeToString,
                response_deserializer=twopc__pb2.AbortResponse.FromString,
                _registered_method=True)
        self.FetchCommit = channel.unary_unary(
                '/twopc.TwoPC/FetchCommit',
                request_serializer=twopc__pb2.FetchCommitRequest.SerializeToString,
                response_deserializer=twopc__pb2.FetchCommitResponse.FromString,
                _registered_method=True)
        self.RestrictDBAccess = channel.unary_unary(
                '/twopc.TwoPC/RestrictDBAccess',
                request_serializer=twopc__pb2.Empty.SerializeToString,
                response_deserializer=twopc__pb2.Empty.FromString,
                _registered_method=True)
        self.AllowDBAccess = channel.unary_unary(
                '/twopc.TwoPC/AllowDBAccess',
                request_serializer=twopc__pb2.Empty.SerializeToString,
                response_deserializer=twopc__pb2.Empty.FromString,
                _registered_method=True)


class TwoPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Abort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RestrictDBAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowDBAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TwoPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=twopc__pb2.InitializeRequest.FromString,
                    response_serializer=twopc__pb2.Empty.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=twopc__pb2.VoteRequest.FromString,
                    response_serializer=twopc__pb2.VoteResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=twopc__pb2.CommitRequest.FromString,
                    response_serializer=twopc__pb2.CommitResponse.SerializeToString,
            ),
            'Abort': grpc.unary_unary_rpc_method_handler(
                    servicer.Abort,
                    request_deserializer=twopc__pb2.AbortRequest.FromString,
                    response_serializer=twopc__pb2.AbortResponse.SerializeToString,
            ),
            'FetchCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchCommit,
                    request_deserializer=twopc__pb2.FetchCommitRequest.FromString,
                    response_serializer=twopc__pb2.FetchCommitResponse.SerializeToString,
            ),
            'RestrictDBAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.RestrictDBAccess,
                    request_deserializer=twopc__pb2.Empty.FromString,
                    response_serializer=twopc__pb2.Empty.SerializeToString,
            ),
            'AllowDBAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowDBAccess,
                    request_deserializer=twopc__pb2.Empty.FromString,
                    response_serializer=twopc__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twopc.TwoPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('twopc.TwoPC', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TwoPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/Initialize',
            twopc__pb2.InitializeRequest.SerializeToString,
            twopc__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/Prepare',
            twopc__pb2.VoteRequest.SerializeToString,
            twopc__pb2.VoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/Commit',
            twopc__pb2.CommitRequest.SerializeToString,
            twopc__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Abort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/Abort',
            twopc__pb2.AbortRequest.SerializeToString,
            twopc__pb2.AbortResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/FetchCommit',
            twopc__pb2.FetchCommitRequest.SerializeToString,
            twopc__pb2.FetchCommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RestrictDBAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/RestrictDBAccess',
            twopc__pb2.Empty.SerializeToString,
            twopc__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllowDBAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/twopc.TwoPC/AllowDBAccess',
            twopc__pb2.Empty.SerializeToString,
            twopc__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
